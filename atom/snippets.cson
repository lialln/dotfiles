# Your snippets #
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

# leetcode commentation {{{
'.source.python':
  'simple print statement testing function units':
    'prefix': 'eout'
    'body': 'print "ðŸ¦„ Expected output is: %s, returned output is: %s" %($1, $2)'
    'commentation for lc python solutions':
      'prefix': 'leethint'
      'body': """
      \"""
      approach:
        $1
      hints:
        $2
      time complexity:
        $3
      space complexity:
        $4
      \"""
    """

'.source.js':
  'react class component':
    'prefix': 'rcc'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';
      class $1 extends Component {
        static propTypes = {
          children: PropTypes.node,
        };
        state = {};
        render() {
          return (
            <div>
              $2
            </div>
          );
        }
      }
      export default $1;
    """

  'react functional component':
    'prefix': 'rfc'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';
      const $1 = ({ children }) => {
        return (
          <div>
            $2
          </div>
        );
      };
      $1.propTypes = { 
        children: propTypes.node,
      };
      export default $1;
    """
    
  'react redux class component':
    'prefix': 'rrcc'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';
      import { connect } from 'react-redux';
      class $1 extends Component {
        static propTypes = { 
          children: propTypes.node,
        };
        state = {};
        render() {
          return (
            <div>
              $2
            </div>
          );
        }
      }
      const mapStateToProps = (state) => {};
      const mapDispatchToProps = (dispatch) => {};
      export default connect(mapStateToProps, mapDispatchToProps)($1);
    """
    
  'react redux functional component':
    'prefix': 'rrfc'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';
      import { connect } from 'react-redux';
      const $1 = ({ children }) => {
        return (
          <div>
            $2
          </div>
        );
      };
      $1.propTypes = { 
        children: propTypes.node,
      };
      const mapStateToProps = (state) => {};
      const mapDispatchToProps = (dispatch) => {};
      export default connect(mapStateToProps, mapDispatchToProps)($1);
    """
# }}}
